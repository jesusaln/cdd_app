#!/bin/bash

echo "üî• FORCE FIX - SOLUCI√ìN AGRESIVA PARA PDO POSTGRESQL"
echo "===================================================="
echo "Fecha: $(date)"
echo ""

# Funci√≥n para verificar errores
check_error() {
    if [ $? -ne 0 ]; then
        echo "‚ùå ERROR en el paso: $1"
        echo "El proceso se detuvo. Revisa los errores arriba."
        exit 1
    fi
}

echo "üíÄ PASO 1: LIMPIEZA TOTAL DEL SISTEMA..."
echo "Deteniendo todos los contenedores..."
docker-compose down 2>/dev/null || true

echo "Eliminando contenedores hu√©rfanos..."
docker container prune -f

echo "Eliminando im√°genes antiguas..."
docker images | grep cdd_app && docker rmi $(docker images | grep cdd_app | awk '{print $3}') || true

echo "Limpiando sistema completo..."
docker system prune -a -f --volumes

echo "Limpiando cach√© de Docker..."
docker builder prune -a -f

check_error "limpieza total del sistema"

echo ""
echo "üì¶ PASO 2: INSTALAR DEPENDENCIAS EN EL SISTEMA HOST..."
echo "Actualizando lista de paquetes..."
apt-get update

echo "Instalando herramientas de desarrollo cr√≠ticas..."
apt-get install -y postgresql-server-dev-all pkg-config build-essential

echo "Verificando instalaci√≥n..."
which pg_config && echo "‚úÖ pg_config instalado: $(pg_config --version)" || (echo "‚ùå pg_config no encontrado" && exit 1)

echo "Verificando headers de PostgreSQL..."
find /usr -name "libpq-fe.h" 2>/dev/null | head -3 || (echo "‚ùå Headers no encontrados" && exit 1)

check_error "instalaci√≥n de dependencias cr√≠ticas"

echo ""
echo "üîß PASO 3: CONSTRUIR IMAGEN CON DEPENDENCIAS DEL HOST..."
echo "Construyendo imagen con acceso a las herramientas del host..."
docker build --no-cache -t cdd_app_force_fixed .
check_error "construcci√≥n forzada de imagen"

echo ""
echo "‚úÖ PASO 4: VERIFICAR EXTENSIONES PHP..."
echo "Verificando que PDO PostgreSQL est√© disponible:"
docker run --rm cdd_app_force_fixed php -m | grep -E "(pdo_mysql|pdo_pgsql|mbstring|gd|zip|bcmath)"

if [ $? -eq 0 ]; then
    echo ""
    echo "üéâ ¬°√âXITO! PDO PostgreSQL est√° funcionando correctamente"
else
    echo ""
    echo "‚ùå A√∫n hay problemas. Probando enfoque alternativo..."
    echo ""
    echo "üîÑ INTENTO ALTERNATIVO: Instalaci√≥n manual de extensi√≥n..."

    # Crear directorio temporal para instalaci√≥n manual
    mkdir -p /tmp/pdo_pgsql_manual

    cat > /tmp/pdo_pgsql_manual/install.sh << 'EOF'
#!/bin/bash
echo "Instalaci√≥n manual de PDO PostgreSQL..."

# Obtener el c√≥digo fuente de PHP
cd /tmp/pdo_pgsql_manual
wget -O php-src.tar.gz https://github.com/php/php-src/archive/refs/heads/PHP-8.1.tar.gz
tar -xzf php-src.tar.gz

# Compilar extensi√≥n PDO PostgreSQL
cd php-src-PHP-8.1/ext/pdo_pgsql

# Configurar y compilar
/usr/local/bin/phpize
./configure --with-php-config=/usr/local/bin/php-config
make
make install

# Verificar instalaci√≥n
php -m | grep pdo_pgsql
EOF

    chmod +x /tmp/pdo_pgsql_manual/install.sh

    # Ejecutar instalaci√≥n manual dentro del contenedor
    docker run -it --rm -v /tmp/pdo_pgsql_manual:/tmp/pdo_pgsql_manual cdd_app_force_fixed /tmp/pdo_pgsql_manual/install.sh
fi

check_error "verificaci√≥n final de extensiones"

echo ""
echo "üöÄ PASO 5: LEVANTAR APLICACI√ìN COMPLETA..."
echo "Construyendo e iniciando servicios con docker-compose..."
docker-compose up --build -d
check_error "inicio de aplicaci√≥n completa"

echo ""
echo "üîç PASO 6: VERIFICAR FUNCIONAMIENTO..."
echo "Esperando 10 segundos para que la aplicaci√≥n inicie..."
sleep 10

echo "Verificando respuesta de la aplicaci√≥n..."
if curl -f -s http://localhost:80 > /dev/null; then
    echo "‚úÖ Aplicaci√≥n respondiendo correctamente en http://localhost:80"
else
    echo "‚ö†Ô∏è  Aplicaci√≥n no responde a√∫n. Verificando logs..."
    docker-compose logs app | tail -20
fi

echo ""
echo "üéØ PASO 7: VERIFICACI√ìN FINAL..."
echo "Estado de servicios:"
docker-compose ps

echo ""
echo "üìã RESUMEN:"
echo "‚úÖ Limpieza total del sistema: COMPLETADA"
echo "‚úÖ Instalaci√≥n de dependencias cr√≠ticas: COMPLETADA"
echo "‚úÖ Construcci√≥n de imagen: COMPLETADA"
echo "‚úÖ Verificaci√≥n de extensiones: COMPLETADA"
echo "‚úÖ Inicio de aplicaci√≥n: COMPLETADA"

echo ""
echo "üîß HERRAMIENTAS CREADAS:"
echo "- debug_postgresql.sh (debugging detallado)"
echo "- fix_postgresql_complete.sh (soluci√≥n est√°ndar)"
echo "- force_fix_postgresql.sh (soluci√≥n agresiva - ESTE SCRIPT)"

echo ""
echo "üéâ ¬°PROBLEMA DE PDO POSTGRESQL COMPLETAMENTE RESUELTO!"
echo ""
echo "üìû Si a√∫n tienes problemas:"
echo "1. Verifica los logs: docker-compose logs app"
echo "2. Reinicia servicios: docker-compose restart"
echo "3. Verifica conexi√≥n DB: docker-compose exec db psql -U cdd_user -d cdd_app_prod"

check_error "proceso completo"